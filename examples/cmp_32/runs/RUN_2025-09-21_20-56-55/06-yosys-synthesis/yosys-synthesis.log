
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.51 (git sha1 c4b519022, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)

1. Executing Liberty frontend: /foss/pdks/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/06-yosys-synthesis/synthesis.abc.sdc' for ABC…

2. Executing Verilog-2005 frontend: rtl/cmp_32.sv
Parsing SystemVerilog input from `rtl/cmp_32.sv' to AST representation.
Storing AST representation for module `$abstract\cmp_32'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\cmp_32'.
Generating RTLIL representation for module `\cmp_32'.

4.1. Analyzing design hierarchy..
Top module:  \cmp_32

4.2. Analyzing design hierarchy..
Top module:  \cmp_32
Removing unused module `$abstract\cmp_32'.
Removed 1 unused modules.
Renaming module cmp_32 to cmp_32.

5. Generating Graphviz representation of design.
Writing dot description to `/home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/06-yosys-synthesis/hierarchy.dot'.
Dumping module cmp_32 to page 1.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \cmp_32

7.2. Analyzing design hierarchy..
Top module:  \cmp_32
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$rtl/cmp_32.sv:0$1 in module cmp_32.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cmp_32.$proc$rtl/cmp_32.sv:0$1'.
     1/5: $2\GT[0:0]
     2/5: $2\EQ[0:0]
     3/5: $1\LT[0:0]
     4/5: $1\EQ[0:0]
     5/5: $1\GT[0:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\cmp_32.\GT' from process `\cmp_32.$proc$rtl/cmp_32.sv:0$1'.
No latch inferred for signal `\cmp_32.\LT' from process `\cmp_32.$proc$rtl/cmp_32.sv:0$1'.
No latch inferred for signal `\cmp_32.\EQ' from process `\cmp_32.$proc$rtl/cmp_32.sv:0$1'.

16. Executing PROC_DFF pass (convert process syncs to FFs).

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\cmp_32.$proc$rtl/cmp_32.sv:0$1'.
Removing empty process `cmp_32.$proc$rtl/cmp_32.sv:0$1'.
Cleaned up 2 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module cmp_32...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cmp_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$14.
    dead port 1/2 on $mux $procmux$8.
Removed 2 multiplexer ports.
<suppressed ~3 debug messages>

27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cmp_32.
Performed a total of 0 changes.

28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

29. Executing OPT_DFF pass (perform DFF optimizations).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

31. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

32. Rerunning OPT passes. (Maybe there is more to do…)

33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cmp_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cmp_32.
Performed a total of 0 changes.

35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

36. Executing OPT_DFF pass (perform DFF optimizations).

37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

38. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

39. Executing FSM pass (extract and optimize FSM).

39.1. Executing FSM_DETECT pass (finding FSMs in design).

39.2. Executing FSM_EXTRACT pass (extracting FSM from design).

39.3. Executing FSM_OPT pass (simple optimizations of FSMs).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

39.5. Executing FSM_OPT pass (simple optimizations of FSMs).

39.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

39.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

39.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

40. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

41. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cmp_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cmp_32.
Performed a total of 0 changes.

44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

45. Executing OPT_DFF pass (perform DFF optimizations).

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

47. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

48. Executing WREDUCE pass (reducing word size of cells).

49. Executing PEEPOPT pass (run peephole optimizers).

50. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

51. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module cmp_32:
  creating $alu model for $gt$rtl/cmp_32.sv:19$3 ($gt): new $alu
  creating $alu model for $lt$rtl/cmp_32.sv:16$2 ($lt): merged with $gt$rtl/cmp_32.sv:19$3.
  creating $alu cell for $gt$rtl/cmp_32.sv:19$3, $lt$rtl/cmp_32.sv:16$2: $auto$alumacc.cc:495:replace_alu$26
  created 1 $alu and 0 $macc cells.

52. Executing SHARE pass (SAT-based resource sharing).

53. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.
<suppressed ~5 debug messages>

54. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

55. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cmp_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

56. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cmp_32.
Performed a total of 0 changes.

57. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

58. Executing OPT_DFF pass (perform DFF optimizations).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

60. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

61. Rerunning OPT passes. (Maybe there is more to do…)

62. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cmp_32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

63. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cmp_32.
Performed a total of 0 changes.

64. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

65. Executing OPT_DFF pass (perform DFF optimizations).

66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

67. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

68. Executing MEMORY pass.

68.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

68.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

68.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

68.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

68.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

68.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

68.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

68.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

68.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

68.10. Executing MEMORY_COLLECT pass (generating $mem cells).

69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

70. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.
<suppressed ~5 debug messages>

71. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

72. Executing OPT_DFF pass (perform DFF optimizations).

73. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

74. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

75. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

76. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

77. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cmp_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

78. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cmp_32.
Performed a total of 0 changes.

79. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

80. Executing OPT_SHARE pass.

81. Executing OPT_DFF pass (perform DFF optimizations).

82. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

83. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

84. Executing TECHMAP pass (map to technology primitives).

84.1. Executing Verilog-2005 frontend: /foss/tools/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/foss/tools/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

84.2. Continuing TECHMAP pass.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~387 debug messages>

85. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.
<suppressed ~35 debug messages>

86. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
<suppressed ~78 debug messages>
Removed a total of 26 cells.

87. Executing OPT_DFF pass (perform DFF optimizations).

88. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..
Removed 84 unused cells and 79 unused wires.
<suppressed ~85 debug messages>

89. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

90. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

91. Executing OPT_DFF pass (perform DFF optimizations).

92. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

93. Executing ABC pass (technology mapping using ABC).

93.1. Extracting gate netlist of module `\cmp_32' to `<abc-temp-dir>/input.blif'..
Extracted 195 gates and 259 wires to a netlist network with 64 inputs and 3 outputs.

93.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

93.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       78
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:                OR cells:       12
ABC RESULTS:             ORNOT cells:       31
ABC RESULTS:              XNOR cells:       10
ABC RESULTS:               XOR cells:       22
ABC RESULTS:        internal signals:      192
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:        3
Removing temp directory.

94. Executing OPT pass (performing simple optimizations).

94.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

94.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

94.3. Executing OPT_DFF pass (perform DFF optimizations).

94.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..
Removed 0 unused cells and 135 unused wires.
<suppressed ~1 debug messages>

94.5. Finished fast OPT passes.

95. Executing HIERARCHY pass (managing design hierarchy).

95.1. Analyzing design hierarchy..
Top module:  \cmp_32

95.2. Analyzing design hierarchy..
Top module:  \cmp_32
Removed 0 unused modules.

96. Executing CHECK pass (checking for obvious problems).
Checking module cmp_32...
Found and reported 0 problems.

97. Printing statistics.

=== cmp_32 ===

   Number of wires:                161
   Number of wire bits:            223
   Number of public wires:           5
   Number of public wire bits:      67
   Number of ports:                  5
   Number of port bits:             67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      78
     $_AND_                          3
     $_NAND_                         1
     $_NOR_                          2
     $_ORNOT_                       31
     $_OR_                          12
     $_XNOR_                        10
     $_XOR_                         22

98. Generating Graphviz representation of design.
Writing dot description to `/home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/06-yosys-synthesis/primitive_techmap.dot'.
Dumping module cmp_32 to page 1.

99. Executing OPT pass (performing simple optimizations).

99.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

99.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

99.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cmp_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

99.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cmp_32.
Performed a total of 0 changes.

99.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cmp_32'.
Removed a total of 0 cells.

99.6. Executing OPT_DFF pass (perform DFF optimizations).

99.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..

99.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cmp_32.

99.9. Finished OPT passes. (There is nothing left to do.)

100. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..
{
   "creator": "Yosys 0.51 (git sha1 c4b519022, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/tmp/3ec4f0a336134e54938fb65dde627114.lib ",
   "modules": {
      "\\cmp_32": {
         "num_wires":         161,
         "num_wire_bits":     223,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 67,
         "num_ports":         5,
         "num_port_bits":     67,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         159,
         "num_cells_by_type": {
            "$_ANDNOT_": 78,
            "$_AND_": 3,
            "$_NAND_": 1,
            "$_NOR_": 2,
            "$_ORNOT_": 31,
            "$_OR_": 12,
            "$_XNOR_": 10,
            "$_XOR_": 22
         }
      }
   },
      "design": {
         "num_wires":         161,
         "num_wire_bits":     223,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 67,
         "num_ports":         5,
         "num_port_bits":     67,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         159,
         "num_cells_by_type": {
            "$_ANDNOT_": 78,
            "$_AND_": 3,
            "$_NAND_": 1,
            "$_NOR_": 2,
            "$_ORNOT_": 31,
            "$_OR_": 12,
            "$_XNOR_": 10,
            "$_XOR_": 22
         }
      }
}

101. Printing statistics.

=== cmp_32 ===

   Number of wires:                161
   Number of wire bits:            223
   Number of public wires:           5
   Number of public wire bits:      67
   Number of ports:                  5
   Number of port bits:             67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      78
     $_AND_                          3
     $_NAND_                         1
     $_NOR_                          2
     $_ORNOT_                       31
     $_OR_                          12
     $_XNOR_                        10
     $_XOR_                         22

   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!

[INFO] Applying tri-state buffer mapping from '/foss/pdks/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'…

102. Executing TECHMAP pass (map to technology primitives).

102.1. Executing Verilog-2005 frontend: /foss/pdks/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/foss/pdks/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

102.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

103. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/foss/pdks/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'…

104. Executing TECHMAP pass (map to technology primitives).

104.1. Executing Verilog-2005 frontend: /foss/pdks/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/foss/pdks/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

104.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

105. Executing SIMPLEMAP pass (map simple cells to gate primitives).

106. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    unmapped dff cell: $_DFFE_PP_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

106.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\cmp_32':
{
   "creator": "Yosys 0.51 (git sha1 c4b519022, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/tmp/3ec4f0a336134e54938fb65dde627114.lib ",
   "modules": {
      "\\cmp_32": {
         "num_wires":         161,
         "num_wire_bits":     223,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 67,
         "num_ports":         5,
         "num_port_bits":     67,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         159,
         "num_cells_by_type": {
            "$_ANDNOT_": 78,
            "$_AND_": 3,
            "$_NAND_": 1,
            "$_NOR_": 2,
            "$_ORNOT_": 31,
            "$_OR_": 12,
            "$_XNOR_": 10,
            "$_XOR_": 22
         }
      }
   },
      "design": {
         "num_wires":         161,
         "num_wire_bits":     223,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 67,
         "num_ports":         5,
         "num_port_bits":     67,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         159,
         "num_cells_by_type": {
            "$_ANDNOT_": 78,
            "$_AND_": 3,
            "$_NAND_": 1,
            "$_NOR_": 2,
            "$_ORNOT_": 31,
            "$_OR_": 12,
            "$_XNOR_": 10,
            "$_XOR_": 22
         }
      }
}

107. Printing statistics.

=== cmp_32 ===

   Number of wires:                161
   Number of wire bits:            223
   Number of public wires:           5
   Number of public wire bits:      67
   Number of ports:                  5
   Number of port bits:             67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      78
     $_AND_                          3
     $_NAND_                         1
     $_NOR_                          2
     $_ORNOT_                       31
     $_OR_                          12
     $_XNOR_                        10
     $_XOR_                         22

   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!

[INFO] Using generated ABC script '/home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/06-yosys-synthesis/AREA_0.abc'…

108. Executing ABC pass (technology mapping using ABC).

108.1. Extracting gate netlist of module `\cmp_32' to `/tmp/yosys-abc-myMcHR/input.blif'..
Extracted 159 gates and 223 wires to a netlist network with 64 inputs and 3 outputs.

108.1.1. Executing ABC.
Running ABC command: "/foss/tools/yosys/bin/yosys-abc" -s -f /tmp/yosys-abc-myMcHR/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-myMcHR/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-myMcHR/input.blif 
ABC: + read_lib -w /home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/tmp/3ec4f0a336134e54938fb65dde627114.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/tmp/3ec4f0a336134e54938fb65dde627114.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.13 sec
ABC: Memory =    9.54 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/06-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/06-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    118 (  9.3 %)   Cap =  5.3 ff ( 16.4 %)   Area =     1051.01 ( 60.2 %)   Delay =  2517.99 ps  (  7.6 %)               
ABC: Path  0 --      49 : 0    2 pi                       A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =   3.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     150 : 2    2 sky130_fd_sc_hd__and2b_2 A =   8.76  Df = 197.1   -1.5 ps  S =  50.9 ps  Cin =  1.6 ff  Cout =   6.1 ff  Cmax = 310.4 ff  G =  367  
ABC: Path  2 --     155 : 4    2 sky130_fd_sc_hd__or4_2   A =   8.76  Df = 855.1 -546.1 ps  S = 103.5 ps  Cin =  1.5 ff  Cout =   4.0 ff  Cmax = 310.4 ff  G =  253  
ABC: Path  3 --     159 : 4    2 sky130_fd_sc_hd__or4b_2  A =  10.01  Df =1536.0-1118.5 ps  S = 104.2 ps  Cin =  1.5 ff  Cout =   4.1 ff  Cmax = 265.5 ff  G =  263  
ABC: Path  4 --     183 : 3    1 sky130_fd_sc_hd__or3b_2  A =   8.76  Df =1998.1-1286.0 ps  S =  82.7 ps  Cin =  1.5 ff  Cout =   4.7 ff  Cmax = 269.2 ff  G =  294  
ABC: Path  5 --     184 : 2    2 sky130_fd_sc_hd__nor2_2  A =   6.26  Df =2346.8-1547.4 ps  S = 421.5 ps  Cin =  4.4 ff  Cout =  38.1 ff  Cmax = 141.9 ff  G =  856  
ABC: Path  6 --     185 : 3    1 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df =2518.0 -101.0 ps  S = 417.6 ps  Cin =  4.6 ff  Cout =  33.4 ff  Cmax = 128.2 ff  G =  733  
ABC: Start-point = pi48 (\B [7]).  End-point = po2 (\GT).
ABC: netlist                       : i/o =   64/    3  lat =    0  nd =   118  edge =    312  area =1051.10  delay = 6.00  lev = 6
ABC: + write_blif /tmp/yosys-abc-myMcHR/output.blif 

108.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:       36
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o32ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        2
ABC RESULTS:        internal signals:      156
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:        3
Removing temp directory.

109. Executing SETUNDEF pass (replace undef values with defined constants).

110. Executing HILOMAP pass (mapping to constant drivers).

111. Executing SPLITNETS pass (splitting up multi-bit signals).

112. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cmp_32..
Removed 0 unused cells and 223 unused wires.
<suppressed ~1 debug messages>

113. Executing INSBUF pass (insert buffer cells for connected wires).

114. Executing CHECK pass (checking for obvious problems).
Checking module cmp_32...
Found and reported 0 problems.
{
   "creator": "Yosys 0.51 (git sha1 c4b519022, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/asic/workspace/cmp_32/runs/RUN_2025-09-21_20-56-55/tmp/3ec4f0a336134e54938fb65dde627114.lib ",
   "modules": {
      "\\cmp_32": {
         "num_wires":         120,
         "num_wire_bits":     182,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 67,
         "num_ports":         5,
         "num_port_bits":     67,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         118,
         "area":              1051.008000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111oi_2": 1,
            "sky130_fd_sc_hd__a211o_2": 1,
            "sky130_fd_sc_hd__a211oi_2": 1,
            "sky130_fd_sc_hd__a21boi_2": 4,
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a21oi_2": 3,
            "sky130_fd_sc_hd__a221o_2": 1,
            "sky130_fd_sc_hd__a22o_2": 3,
            "sky130_fd_sc_hd__a31o_2": 1,
            "sky130_fd_sc_hd__and2_2": 3,
            "sky130_fd_sc_hd__and2b_2": 9,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__and3b_2": 2,
            "sky130_fd_sc_hd__and4_2": 7,
            "sky130_fd_sc_hd__and4b_2": 2,
            "sky130_fd_sc_hd__inv_2": 11,
            "sky130_fd_sc_hd__nand2_2": 4,
            "sky130_fd_sc_hd__nand2b_2": 36,
            "sky130_fd_sc_hd__nand4_2": 2,
            "sky130_fd_sc_hd__nor2_2": 2,
            "sky130_fd_sc_hd__o2111a_2": 3,
            "sky130_fd_sc_hd__o21ai_2": 2,
            "sky130_fd_sc_hd__o21ba_2": 2,
            "sky130_fd_sc_hd__o22a_2": 2,
            "sky130_fd_sc_hd__o2bb2a_2": 2,
            "sky130_fd_sc_hd__o32a_2": 1,
            "sky130_fd_sc_hd__o32ai_2": 1,
            "sky130_fd_sc_hd__or2_2": 1,
            "sky130_fd_sc_hd__or3b_2": 1,
            "sky130_fd_sc_hd__or4_2": 1,
            "sky130_fd_sc_hd__or4b_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 2
         }
      }
   },
      "design": {
         "num_wires":         120,
         "num_wire_bits":     182,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 67,
         "num_ports":         5,
         "num_port_bits":     67,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         118,
         "area":              1051.008000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111oi_2": 1,
            "sky130_fd_sc_hd__a211o_2": 1,
            "sky130_fd_sc_hd__a211oi_2": 1,
            "sky130_fd_sc_hd__a21boi_2": 4,
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a21oi_2": 3,
            "sky130_fd_sc_hd__a221o_2": 1,
            "sky130_fd_sc_hd__a22o_2": 3,
            "sky130_fd_sc_hd__a31o_2": 1,
            "sky130_fd_sc_hd__and2_2": 3,
            "sky130_fd_sc_hd__and2b_2": 9,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__and3b_2": 2,
            "sky130_fd_sc_hd__and4_2": 7,
            "sky130_fd_sc_hd__and4b_2": 2,
            "sky130_fd_sc_hd__inv_2": 11,
            "sky130_fd_sc_hd__nand2_2": 4,
            "sky130_fd_sc_hd__nand2b_2": 36,
            "sky130_fd_sc_hd__nand4_2": 2,
            "sky130_fd_sc_hd__nor2_2": 2,
            "sky130_fd_sc_hd__o2111a_2": 3,
            "sky130_fd_sc_hd__o21ai_2": 2,
            "sky130_fd_sc_hd__o21ba_2": 2,
            "sky130_fd_sc_hd__o22a_2": 2,
            "sky130_fd_sc_hd__o2bb2a_2": 2,
            "sky130_fd_sc_hd__o32a_2": 1,
            "sky130_fd_sc_hd__o32ai_2": 1,
            "sky130_fd_sc_hd__or2_2": 1,
            "sky130_fd_sc_hd__or3b_2": 1,
            "sky130_fd_sc_hd__or4_2": 1,
            "sky130_fd_sc_hd__or4b_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 2
         }
      }
}

115. Printing statistics.

=== cmp_32 ===

   Number of wires:                120
   Number of wire bits:            182
   Number of public wires:           5
   Number of public wire bits:      67
   Number of ports:                  5
   Number of port bits:             67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                118
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a211o_2        1
     sky130_fd_sc_hd__a211oi_2       1
     sky130_fd_sc_hd__a21boi_2       4
     sky130_fd_sc_hd__a21o_2         2
     sky130_fd_sc_hd__a21oi_2        3
     sky130_fd_sc_hd__a221o_2        1
     sky130_fd_sc_hd__a22o_2         3
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__and2_2         3
     sky130_fd_sc_hd__and2b_2        9
     sky130_fd_sc_hd__and3_2         4
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         7
     sky130_fd_sc_hd__and4b_2        2
     sky130_fd_sc_hd__inv_2         11
     sky130_fd_sc_hd__nand2_2        4
     sky130_fd_sc_hd__nand2b_2      36
     sky130_fd_sc_hd__nand4_2        2
     sky130_fd_sc_hd__nor2_2         2
     sky130_fd_sc_hd__o2111a_2       3
     sky130_fd_sc_hd__o21ai_2        2
     sky130_fd_sc_hd__o21ba_2        2
     sky130_fd_sc_hd__o22a_2         2
     sky130_fd_sc_hd__o2bb2a_2       2
     sky130_fd_sc_hd__o32a_2         1
     sky130_fd_sc_hd__o32ai_2        1
     sky130_fd_sc_hd__or2_2          1
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__or4_2          1
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__xnor2_2        2

   Chip area for module '\cmp_32': 1051.008000
     of which used for sequential elements: 0.000000 (0.00%)

116. Executing Verilog backend.
Dumping module `\cmp_32'.

117. Executing JSON backend.
